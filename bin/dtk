#!/usr/bin/env ruby
require_relative('../lib/cli')

class Test 
  include DTK::CLI
  def initialize
    @parser = Parser.default
  end

  def run(argv)
    add_command_defs!

    @parser.run(argv)
  end

  def method_missing(method, *args, &body)
    parser_object_methods.include?(method) ? @parser.send(method, *args, &body) : super
  end
    
  def respond_to?(method)
    parser_object_methods.include?(method) or super
  end

  private

  def parser_object_methods
    @parser_object_methods ||= Parser::Methods.all 
  end


  def add_command_defs!
    assert_defaults

    desc 'Describe some switch here'
    switch [:s,:switch]
    
    desc 'Describe some flag here'
    default_value 'the default'
    arg_name 'The name of the argument'
    flag [:f,:flagname]
    
    desc 'Describe module here'
    arg_name 'Describe arguments to module here'
    command :module do |c|
      c.desc 'Describe a switch to module'
      c.switch :s
      
      c.desc 'Describe a flag to module'
      c.default_value 'default'
      c.flag :f
      c.action do |global_options,options,args|
        
        # Your command logic here
        
        # If you have any errors, just raise them
        # raise "that command made no sense"
        
        puts "module command ran"
      end
    end
  end
end

Test.new.run(ARGV)

